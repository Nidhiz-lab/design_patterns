

Design Pattern: Are common architectural approach in software development.

1) Solid design principles:
	1) Creational: 
		1) Builder:
		2) Factories:
			1) Abstract Factory:
			2) Factory Method:
		3) Prototype:
		4) Singleton:
	2) Structural:
		1) Adapter:
		2) Bridge:
		3) Composite:
		4) Decorator:
		5) Facade:
		6) Flyweight:
		7) Proxy:
	3) Behavioral:
		1) Chain of responsibility:
		2) Command:
		3) Interpreter:
		4) Iterator:
		5) Mediator:
		6) Memento:
		7) Observer:
		8) State:
		9) Strategy:
	   10) Template Method:
	   11) Visitor:

Example:

1) Single responsibility principle:
	This principle suggests that a class should have a single, well-defined purpose, making code more modular, maintainable and reusable.
	One more important useful nes of this principle is "seperation of concern"
2) Open Close principle:
	The system is open for extension and close for modification. The goal is to avoid to jump into the code that you have alredy been written. But we could always extend the code by inheriting
	the existing code and create new objects.
	
3) Liskov substitutio principle:
	The goal is to specify the sub types should be immedietly able to substitutable for their base types
	A function which takes a base class, any derived class should be able to be substituted to the same function without any issue.
4) Interface segregation principle:
	To avoid stuffing too much into a single interface, instead breakup the interface into seperate interfaces
	
	